{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/dvc0310/Stroke-Prediction-Model/blob/main/354_Final_Project.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Introduction**\n",
        ">We have chosen a dataset from Kaggle, it is called 'Brainstroke Dataset'. It contains over 2000 rows and 11 columns.\n",
        "\n",
        ">The dataset features columns such as 'gender', 'age', 'hypertension', and 'heart attack'. Our target variable is the ‘key’ variable which maps integers to pitches using Pitch Class notation.\n",
        "\n"
      ],
      "metadata": {
        "id": "cqqXeVSy2yNp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Questions we plan to answer:**\n",
        "\n",
        "1.   Is there any correlation between key and year or popularity?\n",
        "2.   What is the most common key?\n",
        "3.   What are the most common keys for song genres?\n",
        "\n"
      ],
      "metadata": {
        "id": "aAH49f_m3ia5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        ">  We selected the variables artist, song, year, key, and popularity because we felt they provide the most insights into the data. These variables will help us answer the questions we have planned.\n",
        "\n",
        ">  There were no null values for us to drop, but we did have to make sure we dropped the duplicate values. The duplicates needed to be dropped as they would mess with the data analysis. For example having duplicates could affect the mean, median, and mode of our data."
      ],
      "metadata": {
        "id": "OH5SQ7t9_2Tw"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IO92T-Iob_l8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b45fdc83-25cd-4975-f46c-5ba55ab46813"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "#Run this to connect to the drive. Make sure you move the share drive to your personal drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from matplotlib import pyplot as plt"
      ],
      "metadata": {
        "id": "XnqbRgOjeaU3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Reading Data\n",
        "song_df = pd.read_csv('/content/drive/MyDrive/354 PROJECT/Spotify Songs.csv')"
      ],
      "metadata": {
        "id": "OqZxEuNUeOn9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#i couldn't get the folder into my google drive this is just for me -B\n",
        "#song_df = pd.read_csv('/content/Spotify Songs.csv')"
      ],
      "metadata": {
        "id": "h7ytWAFJEry1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "wHG-khP06cHi",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5e60c9d7-9b46-44ea-ddf1-29a56f42bfd3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "song_df.head()"
      ],
      "metadata": {
        "id": "N_lUG-fugH7u",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "outputId": "73be9866-7077-4282-de3d-b6e02a5b12e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           artist                    song  duration_ms  explicit  year  \\\n",
              "0  Britney Spears  Oops!...I Did It Again       211160     False  2000   \n",
              "1       blink-182    All The Small Things       167066     False  1999   \n",
              "2      Faith Hill                 Breathe       250546     False  1999   \n",
              "3        Bon Jovi            It's My Life       224493     False  2000   \n",
              "4          *NSYNC             Bye Bye Bye       200560     False  2000   \n",
              "\n",
              "   popularity  danceability  energy  key  loudness  mode  speechiness  \\\n",
              "0          77         0.751   0.834    1    -5.444     0       0.0437   \n",
              "1          79         0.434   0.897    0    -4.918     1       0.0488   \n",
              "2          66         0.529   0.496    7    -9.007     1       0.0290   \n",
              "3          78         0.551   0.913    0    -4.063     0       0.0466   \n",
              "4          65         0.614   0.928    8    -4.806     0       0.0516   \n",
              "\n",
              "   acousticness  instrumentalness  liveness  valence    tempo         genre  \n",
              "0        0.3000          0.000018    0.3550    0.894   95.053           pop  \n",
              "1        0.0103          0.000000    0.6120    0.684  148.726     rock, pop  \n",
              "2        0.1730          0.000000    0.2510    0.278  136.859  pop, country  \n",
              "3        0.0263          0.000013    0.3470    0.544  119.992   rock, metal  \n",
              "4        0.0408          0.001040    0.0845    0.879  172.656           pop  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-66a7483b-9734-4e51-92a3-9cffe5f27a84\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>artist</th>\n",
              "      <th>song</th>\n",
              "      <th>duration_ms</th>\n",
              "      <th>explicit</th>\n",
              "      <th>year</th>\n",
              "      <th>popularity</th>\n",
              "      <th>danceability</th>\n",
              "      <th>energy</th>\n",
              "      <th>key</th>\n",
              "      <th>loudness</th>\n",
              "      <th>mode</th>\n",
              "      <th>speechiness</th>\n",
              "      <th>acousticness</th>\n",
              "      <th>instrumentalness</th>\n",
              "      <th>liveness</th>\n",
              "      <th>valence</th>\n",
              "      <th>tempo</th>\n",
              "      <th>genre</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Britney Spears</td>\n",
              "      <td>Oops!...I Did It Again</td>\n",
              "      <td>211160</td>\n",
              "      <td>False</td>\n",
              "      <td>2000</td>\n",
              "      <td>77</td>\n",
              "      <td>0.751</td>\n",
              "      <td>0.834</td>\n",
              "      <td>1</td>\n",
              "      <td>-5.444</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0437</td>\n",
              "      <td>0.3000</td>\n",
              "      <td>0.000018</td>\n",
              "      <td>0.3550</td>\n",
              "      <td>0.894</td>\n",
              "      <td>95.053</td>\n",
              "      <td>pop</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>blink-182</td>\n",
              "      <td>All The Small Things</td>\n",
              "      <td>167066</td>\n",
              "      <td>False</td>\n",
              "      <td>1999</td>\n",
              "      <td>79</td>\n",
              "      <td>0.434</td>\n",
              "      <td>0.897</td>\n",
              "      <td>0</td>\n",
              "      <td>-4.918</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0488</td>\n",
              "      <td>0.0103</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.6120</td>\n",
              "      <td>0.684</td>\n",
              "      <td>148.726</td>\n",
              "      <td>rock, pop</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Faith Hill</td>\n",
              "      <td>Breathe</td>\n",
              "      <td>250546</td>\n",
              "      <td>False</td>\n",
              "      <td>1999</td>\n",
              "      <td>66</td>\n",
              "      <td>0.529</td>\n",
              "      <td>0.496</td>\n",
              "      <td>7</td>\n",
              "      <td>-9.007</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0290</td>\n",
              "      <td>0.1730</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.2510</td>\n",
              "      <td>0.278</td>\n",
              "      <td>136.859</td>\n",
              "      <td>pop, country</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Bon Jovi</td>\n",
              "      <td>It's My Life</td>\n",
              "      <td>224493</td>\n",
              "      <td>False</td>\n",
              "      <td>2000</td>\n",
              "      <td>78</td>\n",
              "      <td>0.551</td>\n",
              "      <td>0.913</td>\n",
              "      <td>0</td>\n",
              "      <td>-4.063</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0466</td>\n",
              "      <td>0.0263</td>\n",
              "      <td>0.000013</td>\n",
              "      <td>0.3470</td>\n",
              "      <td>0.544</td>\n",
              "      <td>119.992</td>\n",
              "      <td>rock, metal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>*NSYNC</td>\n",
              "      <td>Bye Bye Bye</td>\n",
              "      <td>200560</td>\n",
              "      <td>False</td>\n",
              "      <td>2000</td>\n",
              "      <td>65</td>\n",
              "      <td>0.614</td>\n",
              "      <td>0.928</td>\n",
              "      <td>8</td>\n",
              "      <td>-4.806</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0516</td>\n",
              "      <td>0.0408</td>\n",
              "      <td>0.001040</td>\n",
              "      <td>0.0845</td>\n",
              "      <td>0.879</td>\n",
              "      <td>172.656</td>\n",
              "      <td>pop</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-66a7483b-9734-4e51-92a3-9cffe5f27a84')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-66a7483b-9734-4e51-92a3-9cffe5f27a84 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-66a7483b-9734-4e51-92a3-9cffe5f27a84');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Creating a df of only the columns we are interested in\n",
        "df2 = song_df[['artist','song','genre','year','key','popularity', 'explicit']]\n",
        "#new df with duplicate values dropped\n",
        "df3= df2.drop_duplicates()\n",
        "df3.head(10)"
      ],
      "metadata": {
        "id": "uHX1cA1U5u8I",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "outputId": "0b9faedd-428e-4fe1-88d7-8d8c0feef264"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            artist                    song              genre  year  key  \\\n",
              "0   Britney Spears  Oops!...I Did It Again                pop  2000    1   \n",
              "1        blink-182    All The Small Things          rock, pop  1999    0   \n",
              "2       Faith Hill                 Breathe       pop, country  1999    7   \n",
              "3         Bon Jovi            It's My Life        rock, metal  2000    0   \n",
              "4           *NSYNC             Bye Bye Bye                pop  2000    8   \n",
              "5            Sisqo              Thong Song  hip hop, pop, R&B  1999    2   \n",
              "6           Eminem     The Real Slim Shady            hip hop  2000    5   \n",
              "7  Robbie Williams                 Rock DJ          pop, rock  2000    7   \n",
              "8  Destiny's Child             Say My Name           pop, R&B  1999    5   \n",
              "9            Modjo  Lady - Hear Me Tonight   Dance/Electronic  2001    6   \n",
              "\n",
              "   popularity  explicit  \n",
              "0          77     False  \n",
              "1          79     False  \n",
              "2          66     False  \n",
              "3          78     False  \n",
              "4          65     False  \n",
              "5          69      True  \n",
              "6          86      True  \n",
              "7          68     False  \n",
              "8          75     False  \n",
              "9          77     False  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-78e421d9-f29c-49be-a113-f607f290481d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>artist</th>\n",
              "      <th>song</th>\n",
              "      <th>genre</th>\n",
              "      <th>year</th>\n",
              "      <th>key</th>\n",
              "      <th>popularity</th>\n",
              "      <th>explicit</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Britney Spears</td>\n",
              "      <td>Oops!...I Did It Again</td>\n",
              "      <td>pop</td>\n",
              "      <td>2000</td>\n",
              "      <td>1</td>\n",
              "      <td>77</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>blink-182</td>\n",
              "      <td>All The Small Things</td>\n",
              "      <td>rock, pop</td>\n",
              "      <td>1999</td>\n",
              "      <td>0</td>\n",
              "      <td>79</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Faith Hill</td>\n",
              "      <td>Breathe</td>\n",
              "      <td>pop, country</td>\n",
              "      <td>1999</td>\n",
              "      <td>7</td>\n",
              "      <td>66</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Bon Jovi</td>\n",
              "      <td>It's My Life</td>\n",
              "      <td>rock, metal</td>\n",
              "      <td>2000</td>\n",
              "      <td>0</td>\n",
              "      <td>78</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>*NSYNC</td>\n",
              "      <td>Bye Bye Bye</td>\n",
              "      <td>pop</td>\n",
              "      <td>2000</td>\n",
              "      <td>8</td>\n",
              "      <td>65</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Sisqo</td>\n",
              "      <td>Thong Song</td>\n",
              "      <td>hip hop, pop, R&amp;B</td>\n",
              "      <td>1999</td>\n",
              "      <td>2</td>\n",
              "      <td>69</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Eminem</td>\n",
              "      <td>The Real Slim Shady</td>\n",
              "      <td>hip hop</td>\n",
              "      <td>2000</td>\n",
              "      <td>5</td>\n",
              "      <td>86</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Robbie Williams</td>\n",
              "      <td>Rock DJ</td>\n",
              "      <td>pop, rock</td>\n",
              "      <td>2000</td>\n",
              "      <td>7</td>\n",
              "      <td>68</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Destiny's Child</td>\n",
              "      <td>Say My Name</td>\n",
              "      <td>pop, R&amp;B</td>\n",
              "      <td>1999</td>\n",
              "      <td>5</td>\n",
              "      <td>75</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Modjo</td>\n",
              "      <td>Lady - Hear Me Tonight</td>\n",
              "      <td>Dance/Electronic</td>\n",
              "      <td>2001</td>\n",
              "      <td>6</td>\n",
              "      <td>77</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-78e421d9-f29c-49be-a113-f607f290481d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-78e421d9-f29c-49be-a113-f607f290481d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-78e421d9-f29c-49be-a113-f607f290481d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def explicitnumber (item):\n",
        "  if item == False:\n",
        "    return 0\n",
        "  else:\n",
        "    return 1"
      ],
      "metadata": {
        "id": "uD3ZpYZLpXli"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df3['explicitNum'] = df3['explicit'].apply(explicitnumber)\n",
        "\n",
        "df3.head(30)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "5bombtC-ppnt",
        "outputId": "b6c494a0-d150-4944-ca31-6ffc198282b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-15-ca1a8dd8d827>:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df3['explicitNum'] = df3['explicit'].apply(explicitnumber)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             artist                                              song  \\\n",
              "0    Britney Spears                            Oops!...I Did It Again   \n",
              "1         blink-182                              All The Small Things   \n",
              "2        Faith Hill                                           Breathe   \n",
              "3          Bon Jovi                                      It's My Life   \n",
              "4            *NSYNC                                       Bye Bye Bye   \n",
              "5             Sisqo                                        Thong Song   \n",
              "6            Eminem                               The Real Slim Shady   \n",
              "7   Robbie Williams                                           Rock DJ   \n",
              "8   Destiny's Child                                       Say My Name   \n",
              "9             Modjo                            Lady - Hear Me Tonight   \n",
              "10  Gigi D'Agostino                                  L'Amour Toujours   \n",
              "11        Eiffel 65  Move Your Body - Gabry Ponte Original Radio Edit   \n",
              "12     Bomfunk MC's                                        Freestyler   \n",
              "13            Sting                                       Desert Rose   \n",
              "14        Melanie C                           Never Be The Same Again   \n",
              "15          Aaliyah                                         Try Again   \n",
              "16        Anastacia                       I'm Outta Love - Radio Edit   \n",
              "17     Alice Deejay                                  Better Off Alone   \n",
              "18  Gigi D'Agostino                                        The Riddle   \n",
              "19          Dr. Dre                                  The Next Episode   \n",
              "20      Linkin Park                                        In the End   \n",
              "21        Tom Jones                                           Sexbomb   \n",
              "22          Sonique                                  It Feels So Good   \n",
              "23           M.O.P.                                       Cold as Ice   \n",
              "24        Melanie C                                     I Turn To You   \n",
              "25      Limp Bizkit                                Take A Look Around   \n",
              "26           Darude                                         Sandstorm   \n",
              "27          Da Brat                      What'chu Like (feat. Tyrese)   \n",
              "28           Moloko                                   The Time Is Now   \n",
              "29          Chicane                                     Don't Give Up   \n",
              "\n",
              "                                  genre  year  key  popularity  explicit  \\\n",
              "0                                   pop  2000    1          77     False   \n",
              "1                             rock, pop  1999    0          79     False   \n",
              "2                          pop, country  1999    7          66     False   \n",
              "3                           rock, metal  2000    0          78     False   \n",
              "4                                   pop  2000    8          65     False   \n",
              "5                     hip hop, pop, R&B  1999    2          69      True   \n",
              "6                               hip hop  2000    5          86      True   \n",
              "7                             pop, rock  2000    7          68     False   \n",
              "8                              pop, R&B  1999    5          75     False   \n",
              "9                      Dance/Electronic  2001    6          77     False   \n",
              "10                                  pop  2011    7           1     False   \n",
              "11                                  pop  1999    7          56     False   \n",
              "12                                  pop  2000   11          55     False   \n",
              "13                            rock, pop  1999    0          62     False   \n",
              "14                pop, Dance/Electronic  1999    3          61     False   \n",
              "15                    hip hop, pop, R&B  2002    6          53     False   \n",
              "16                                  pop  1999   10          64     False   \n",
              "17                                  pop  2000    8          73     False   \n",
              "18                                  pop  1999    6          64     False   \n",
              "19                              hip hop  1999   10          82      True   \n",
              "20                          rock, metal  2000    3          83     False   \n",
              "21  rock, Folk/Acoustic, easy listening  1999    8          65     False   \n",
              "22                                  pop  2000    5          62     False   \n",
              "23                              hip hop  2000   11          54      True   \n",
              "24                pop, Dance/Electronic  1999    1          54     False   \n",
              "25                                metal  2000   11          72     False   \n",
              "26                pop, Dance/Electronic  2001   11          69     False   \n",
              "27                    hip hop, pop, R&B  2000   10          53      True   \n",
              "28                pop, Dance/Electronic  2000    9          54     False   \n",
              "29                     Dance/Electronic  2016   10          47     False   \n",
              "\n",
              "    explicitNum  \n",
              "0             0  \n",
              "1             0  \n",
              "2             0  \n",
              "3             0  \n",
              "4             0  \n",
              "5             1  \n",
              "6             1  \n",
              "7             0  \n",
              "8             0  \n",
              "9             0  \n",
              "10            0  \n",
              "11            0  \n",
              "12            0  \n",
              "13            0  \n",
              "14            0  \n",
              "15            0  \n",
              "16            0  \n",
              "17            0  \n",
              "18            0  \n",
              "19            1  \n",
              "20            0  \n",
              "21            0  \n",
              "22            0  \n",
              "23            1  \n",
              "24            0  \n",
              "25            0  \n",
              "26            0  \n",
              "27            1  \n",
              "28            0  \n",
              "29            0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b7e305c5-9eb5-4927-8e3d-1938e823046a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>artist</th>\n",
              "      <th>song</th>\n",
              "      <th>genre</th>\n",
              "      <th>year</th>\n",
              "      <th>key</th>\n",
              "      <th>popularity</th>\n",
              "      <th>explicit</th>\n",
              "      <th>explicitNum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Britney Spears</td>\n",
              "      <td>Oops!...I Did It Again</td>\n",
              "      <td>pop</td>\n",
              "      <td>2000</td>\n",
              "      <td>1</td>\n",
              "      <td>77</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>blink-182</td>\n",
              "      <td>All The Small Things</td>\n",
              "      <td>rock, pop</td>\n",
              "      <td>1999</td>\n",
              "      <td>0</td>\n",
              "      <td>79</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Faith Hill</td>\n",
              "      <td>Breathe</td>\n",
              "      <td>pop, country</td>\n",
              "      <td>1999</td>\n",
              "      <td>7</td>\n",
              "      <td>66</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Bon Jovi</td>\n",
              "      <td>It's My Life</td>\n",
              "      <td>rock, metal</td>\n",
              "      <td>2000</td>\n",
              "      <td>0</td>\n",
              "      <td>78</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>*NSYNC</td>\n",
              "      <td>Bye Bye Bye</td>\n",
              "      <td>pop</td>\n",
              "      <td>2000</td>\n",
              "      <td>8</td>\n",
              "      <td>65</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Sisqo</td>\n",
              "      <td>Thong Song</td>\n",
              "      <td>hip hop, pop, R&amp;B</td>\n",
              "      <td>1999</td>\n",
              "      <td>2</td>\n",
              "      <td>69</td>\n",
              "      <td>True</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Eminem</td>\n",
              "      <td>The Real Slim Shady</td>\n",
              "      <td>hip hop</td>\n",
              "      <td>2000</td>\n",
              "      <td>5</td>\n",
              "      <td>86</td>\n",
              "      <td>True</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Robbie Williams</td>\n",
              "      <td>Rock DJ</td>\n",
              "      <td>pop, rock</td>\n",
              "      <td>2000</td>\n",
              "      <td>7</td>\n",
              "      <td>68</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Destiny's Child</td>\n",
              "      <td>Say My Name</td>\n",
              "      <td>pop, R&amp;B</td>\n",
              "      <td>1999</td>\n",
              "      <td>5</td>\n",
              "      <td>75</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Modjo</td>\n",
              "      <td>Lady - Hear Me Tonight</td>\n",
              "      <td>Dance/Electronic</td>\n",
              "      <td>2001</td>\n",
              "      <td>6</td>\n",
              "      <td>77</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Gigi D'Agostino</td>\n",
              "      <td>L'Amour Toujours</td>\n",
              "      <td>pop</td>\n",
              "      <td>2011</td>\n",
              "      <td>7</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Eiffel 65</td>\n",
              "      <td>Move Your Body - Gabry Ponte Original Radio Edit</td>\n",
              "      <td>pop</td>\n",
              "      <td>1999</td>\n",
              "      <td>7</td>\n",
              "      <td>56</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Bomfunk MC's</td>\n",
              "      <td>Freestyler</td>\n",
              "      <td>pop</td>\n",
              "      <td>2000</td>\n",
              "      <td>11</td>\n",
              "      <td>55</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Sting</td>\n",
              "      <td>Desert Rose</td>\n",
              "      <td>rock, pop</td>\n",
              "      <td>1999</td>\n",
              "      <td>0</td>\n",
              "      <td>62</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Melanie C</td>\n",
              "      <td>Never Be The Same Again</td>\n",
              "      <td>pop, Dance/Electronic</td>\n",
              "      <td>1999</td>\n",
              "      <td>3</td>\n",
              "      <td>61</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Aaliyah</td>\n",
              "      <td>Try Again</td>\n",
              "      <td>hip hop, pop, R&amp;B</td>\n",
              "      <td>2002</td>\n",
              "      <td>6</td>\n",
              "      <td>53</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Anastacia</td>\n",
              "      <td>I'm Outta Love - Radio Edit</td>\n",
              "      <td>pop</td>\n",
              "      <td>1999</td>\n",
              "      <td>10</td>\n",
              "      <td>64</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Alice Deejay</td>\n",
              "      <td>Better Off Alone</td>\n",
              "      <td>pop</td>\n",
              "      <td>2000</td>\n",
              "      <td>8</td>\n",
              "      <td>73</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Gigi D'Agostino</td>\n",
              "      <td>The Riddle</td>\n",
              "      <td>pop</td>\n",
              "      <td>1999</td>\n",
              "      <td>6</td>\n",
              "      <td>64</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Dr. Dre</td>\n",
              "      <td>The Next Episode</td>\n",
              "      <td>hip hop</td>\n",
              "      <td>1999</td>\n",
              "      <td>10</td>\n",
              "      <td>82</td>\n",
              "      <td>True</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Linkin Park</td>\n",
              "      <td>In the End</td>\n",
              "      <td>rock, metal</td>\n",
              "      <td>2000</td>\n",
              "      <td>3</td>\n",
              "      <td>83</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Tom Jones</td>\n",
              "      <td>Sexbomb</td>\n",
              "      <td>rock, Folk/Acoustic, easy listening</td>\n",
              "      <td>1999</td>\n",
              "      <td>8</td>\n",
              "      <td>65</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Sonique</td>\n",
              "      <td>It Feels So Good</td>\n",
              "      <td>pop</td>\n",
              "      <td>2000</td>\n",
              "      <td>5</td>\n",
              "      <td>62</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>M.O.P.</td>\n",
              "      <td>Cold as Ice</td>\n",
              "      <td>hip hop</td>\n",
              "      <td>2000</td>\n",
              "      <td>11</td>\n",
              "      <td>54</td>\n",
              "      <td>True</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>Melanie C</td>\n",
              "      <td>I Turn To You</td>\n",
              "      <td>pop, Dance/Electronic</td>\n",
              "      <td>1999</td>\n",
              "      <td>1</td>\n",
              "      <td>54</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Limp Bizkit</td>\n",
              "      <td>Take A Look Around</td>\n",
              "      <td>metal</td>\n",
              "      <td>2000</td>\n",
              "      <td>11</td>\n",
              "      <td>72</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Darude</td>\n",
              "      <td>Sandstorm</td>\n",
              "      <td>pop, Dance/Electronic</td>\n",
              "      <td>2001</td>\n",
              "      <td>11</td>\n",
              "      <td>69</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>Da Brat</td>\n",
              "      <td>What'chu Like (feat. Tyrese)</td>\n",
              "      <td>hip hop, pop, R&amp;B</td>\n",
              "      <td>2000</td>\n",
              "      <td>10</td>\n",
              "      <td>53</td>\n",
              "      <td>True</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>Moloko</td>\n",
              "      <td>The Time Is Now</td>\n",
              "      <td>pop, Dance/Electronic</td>\n",
              "      <td>2000</td>\n",
              "      <td>9</td>\n",
              "      <td>54</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>Chicane</td>\n",
              "      <td>Don't Give Up</td>\n",
              "      <td>Dance/Electronic</td>\n",
              "      <td>2016</td>\n",
              "      <td>10</td>\n",
              "      <td>47</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b7e305c5-9eb5-4927-8e3d-1938e823046a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b7e305c5-9eb5-4927-8e3d-1938e823046a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b7e305c5-9eb5-4927-8e3d-1938e823046a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Checking if there are any null values\n",
        "df3.isnull().sum()"
      ],
      "metadata": {
        "id": "A4tJpt5VGrA8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "86975a44-ce15-4bcc-bf02-5e558b50f44b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "artist         0\n",
              "song           0\n",
              "genre          0\n",
              "year           0\n",
              "key            0\n",
              "popularity     0\n",
              "explicit       0\n",
              "explicitNum    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Sorts the df in descending order of popularity\n",
        "pop_df = df3.sort_values(['popularity'], ascending=[False])\n",
        "pop_key = pop_df.head(20)\n",
        "pop_key"
      ],
      "metadata": {
        "id": "5Z_c9upXEkC2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "outputId": "d286b8e4-b7b9-4020-8c50-70a40aaadd53"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 artist                                 song  \\\n",
              "1322  The Neighbourhood                      Sweater Weather   \n",
              "1311          Tom Odell                         Another Love   \n",
              "201              Eminem                           Without Me   \n",
              "1819      Billie Eilish                 lovely (with Khalid)   \n",
              "1613             WILLOW                       Wait a Minute!   \n",
              "6                Eminem                  The Real Slim Shady   \n",
              "1514             Avicii                           The Nights   \n",
              "1512  The Neighbourhood                         Daddy Issues   \n",
              "1709         Ed Sheeran                              Perfect   \n",
              "1999        Post Malone                              Circles   \n",
              "1227         Bruno Mars                 Locked out of Heaven   \n",
              "209              Eminem                     'Till I Collapse   \n",
              "1905      Gesaffelstein  Lost in the Fire (feat. The Weeknd)   \n",
              "1344     Arctic Monkeys                     Do I Wanna Know?   \n",
              "1712      Billie Eilish                                Bored   \n",
              "1408        John Legend                            All of Me   \n",
              "1701          Sean Paul                               No Lie   \n",
              "1700         Ed Sheeran                         Shape of You   \n",
              "1511         The Weeknd                            The Hills   \n",
              "1910      Lewis Capaldi                    Someone You Loved   \n",
              "\n",
              "                           genre  year  key  popularity  explicit  explicitNum  \n",
              "1322                   rock, pop  2013   10          89     False            0  \n",
              "1311                         pop  2013    4          88      True            1  \n",
              "201                      hip hop  2002    7          87      True            1  \n",
              "1819       pop, Dance/Electronic  2018    4          86     False            0  \n",
              "1613  pop, R&B, Dance/Electronic  2015    3          86     False            0  \n",
              "6                        hip hop  2000    5          86      True            1  \n",
              "1514       pop, Dance/Electronic  2014    6          85     False            0  \n",
              "1512                   rock, pop  2015   10          85     False            0  \n",
              "1709                         pop  2017    8          85     False            0  \n",
              "1999                     hip hop  2019    0          85     False            0  \n",
              "1227                         pop  2012    5          85     False            0  \n",
              "209                      hip hop  2002    1          85      True            1  \n",
              "1905            Dance/Electronic  2019    2          84      True            1  \n",
              "1344                        rock  2013    5          84     False            0  \n",
              "1712       pop, Dance/Electronic  2017    7          84     False            0  \n",
              "1408                    pop, R&B  2013    8          84     False            0  \n",
              "1701                hip hop, pop  2018    7          84     False            0  \n",
              "1700                         pop  2017    1          84     False            0  \n",
              "1511                    pop, R&B  2015    0          84      True            1  \n",
              "1910                         pop  2019    1          84     False            0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-846a229a-5948-4c32-81e1-08faec3b8d3e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>artist</th>\n",
              "      <th>song</th>\n",
              "      <th>genre</th>\n",
              "      <th>year</th>\n",
              "      <th>key</th>\n",
              "      <th>popularity</th>\n",
              "      <th>explicit</th>\n",
              "      <th>explicitNum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1322</th>\n",
              "      <td>The Neighbourhood</td>\n",
              "      <td>Sweater Weather</td>\n",
              "      <td>rock, pop</td>\n",
              "      <td>2013</td>\n",
              "      <td>10</td>\n",
              "      <td>89</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1311</th>\n",
              "      <td>Tom Odell</td>\n",
              "      <td>Another Love</td>\n",
              "      <td>pop</td>\n",
              "      <td>2013</td>\n",
              "      <td>4</td>\n",
              "      <td>88</td>\n",
              "      <td>True</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>201</th>\n",
              "      <td>Eminem</td>\n",
              "      <td>Without Me</td>\n",
              "      <td>hip hop</td>\n",
              "      <td>2002</td>\n",
              "      <td>7</td>\n",
              "      <td>87</td>\n",
              "      <td>True</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1819</th>\n",
              "      <td>Billie Eilish</td>\n",
              "      <td>lovely (with Khalid)</td>\n",
              "      <td>pop, Dance/Electronic</td>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>86</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1613</th>\n",
              "      <td>WILLOW</td>\n",
              "      <td>Wait a Minute!</td>\n",
              "      <td>pop, R&amp;B, Dance/Electronic</td>\n",
              "      <td>2015</td>\n",
              "      <td>3</td>\n",
              "      <td>86</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Eminem</td>\n",
              "      <td>The Real Slim Shady</td>\n",
              "      <td>hip hop</td>\n",
              "      <td>2000</td>\n",
              "      <td>5</td>\n",
              "      <td>86</td>\n",
              "      <td>True</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1514</th>\n",
              "      <td>Avicii</td>\n",
              "      <td>The Nights</td>\n",
              "      <td>pop, Dance/Electronic</td>\n",
              "      <td>2014</td>\n",
              "      <td>6</td>\n",
              "      <td>85</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1512</th>\n",
              "      <td>The Neighbourhood</td>\n",
              "      <td>Daddy Issues</td>\n",
              "      <td>rock, pop</td>\n",
              "      <td>2015</td>\n",
              "      <td>10</td>\n",
              "      <td>85</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1709</th>\n",
              "      <td>Ed Sheeran</td>\n",
              "      <td>Perfect</td>\n",
              "      <td>pop</td>\n",
              "      <td>2017</td>\n",
              "      <td>8</td>\n",
              "      <td>85</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999</th>\n",
              "      <td>Post Malone</td>\n",
              "      <td>Circles</td>\n",
              "      <td>hip hop</td>\n",
              "      <td>2019</td>\n",
              "      <td>0</td>\n",
              "      <td>85</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1227</th>\n",
              "      <td>Bruno Mars</td>\n",
              "      <td>Locked out of Heaven</td>\n",
              "      <td>pop</td>\n",
              "      <td>2012</td>\n",
              "      <td>5</td>\n",
              "      <td>85</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>209</th>\n",
              "      <td>Eminem</td>\n",
              "      <td>'Till I Collapse</td>\n",
              "      <td>hip hop</td>\n",
              "      <td>2002</td>\n",
              "      <td>1</td>\n",
              "      <td>85</td>\n",
              "      <td>True</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1905</th>\n",
              "      <td>Gesaffelstein</td>\n",
              "      <td>Lost in the Fire (feat. The Weeknd)</td>\n",
              "      <td>Dance/Electronic</td>\n",
              "      <td>2019</td>\n",
              "      <td>2</td>\n",
              "      <td>84</td>\n",
              "      <td>True</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1344</th>\n",
              "      <td>Arctic Monkeys</td>\n",
              "      <td>Do I Wanna Know?</td>\n",
              "      <td>rock</td>\n",
              "      <td>2013</td>\n",
              "      <td>5</td>\n",
              "      <td>84</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1712</th>\n",
              "      <td>Billie Eilish</td>\n",
              "      <td>Bored</td>\n",
              "      <td>pop, Dance/Electronic</td>\n",
              "      <td>2017</td>\n",
              "      <td>7</td>\n",
              "      <td>84</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1408</th>\n",
              "      <td>John Legend</td>\n",
              "      <td>All of Me</td>\n",
              "      <td>pop, R&amp;B</td>\n",
              "      <td>2013</td>\n",
              "      <td>8</td>\n",
              "      <td>84</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1701</th>\n",
              "      <td>Sean Paul</td>\n",
              "      <td>No Lie</td>\n",
              "      <td>hip hop, pop</td>\n",
              "      <td>2018</td>\n",
              "      <td>7</td>\n",
              "      <td>84</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1700</th>\n",
              "      <td>Ed Sheeran</td>\n",
              "      <td>Shape of You</td>\n",
              "      <td>pop</td>\n",
              "      <td>2017</td>\n",
              "      <td>1</td>\n",
              "      <td>84</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1511</th>\n",
              "      <td>The Weeknd</td>\n",
              "      <td>The Hills</td>\n",
              "      <td>pop, R&amp;B</td>\n",
              "      <td>2015</td>\n",
              "      <td>0</td>\n",
              "      <td>84</td>\n",
              "      <td>True</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1910</th>\n",
              "      <td>Lewis Capaldi</td>\n",
              "      <td>Someone You Loved</td>\n",
              "      <td>pop</td>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>84</td>\n",
              "      <td>False</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-846a229a-5948-4c32-81e1-08faec3b8d3e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-846a229a-5948-4c32-81e1-08faec3b8d3e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-846a229a-5948-4c32-81e1-08faec3b8d3e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#shows the mode of each of the columns\n",
        "#most common key is 1 which is C♯/D♭\n",
        "pop_key.mode()"
      ],
      "metadata": {
        "id": "G9WsbgS0EpFP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "outputId": "37689419-6ab1-48b2-cd2c-fb080c1c4ccb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    artist                                 song genre    year  key  \\\n",
              "0   Eminem                     'Till I Collapse   pop  2013.0  1.0   \n",
              "1      NaN                            All of Me   NaN     NaN  5.0   \n",
              "2      NaN                         Another Love   NaN     NaN  7.0   \n",
              "3      NaN                                Bored   NaN     NaN  NaN   \n",
              "4      NaN                              Circles   NaN     NaN  NaN   \n",
              "5      NaN                         Daddy Issues   NaN     NaN  NaN   \n",
              "6      NaN                     Do I Wanna Know?   NaN     NaN  NaN   \n",
              "7      NaN                 Locked out of Heaven   NaN     NaN  NaN   \n",
              "8      NaN  Lost in the Fire (feat. The Weeknd)   NaN     NaN  NaN   \n",
              "9      NaN                               No Lie   NaN     NaN  NaN   \n",
              "10     NaN                              Perfect   NaN     NaN  NaN   \n",
              "11     NaN                         Shape of You   NaN     NaN  NaN   \n",
              "12     NaN                    Someone You Loved   NaN     NaN  NaN   \n",
              "13     NaN                      Sweater Weather   NaN     NaN  NaN   \n",
              "14     NaN                            The Hills   NaN     NaN  NaN   \n",
              "15     NaN                           The Nights   NaN     NaN  NaN   \n",
              "16     NaN                  The Real Slim Shady   NaN     NaN  NaN   \n",
              "17     NaN                       Wait a Minute!   NaN     NaN  NaN   \n",
              "18     NaN                           Without Me   NaN     NaN  NaN   \n",
              "19     NaN                 lovely (with Khalid)   NaN     NaN  NaN   \n",
              "\n",
              "    popularity explicit  explicitNum  \n",
              "0         84.0    False          0.0  \n",
              "1          NaN      NaN          NaN  \n",
              "2          NaN      NaN          NaN  \n",
              "3          NaN      NaN          NaN  \n",
              "4          NaN      NaN          NaN  \n",
              "5          NaN      NaN          NaN  \n",
              "6          NaN      NaN          NaN  \n",
              "7          NaN      NaN          NaN  \n",
              "8          NaN      NaN          NaN  \n",
              "9          NaN      NaN          NaN  \n",
              "10         NaN      NaN          NaN  \n",
              "11         NaN      NaN          NaN  \n",
              "12         NaN      NaN          NaN  \n",
              "13         NaN      NaN          NaN  \n",
              "14         NaN      NaN          NaN  \n",
              "15         NaN      NaN          NaN  \n",
              "16         NaN      NaN          NaN  \n",
              "17         NaN      NaN          NaN  \n",
              "18         NaN      NaN          NaN  \n",
              "19         NaN      NaN          NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5bcfb619-1987-4e47-b065-57004c648b75\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>artist</th>\n",
              "      <th>song</th>\n",
              "      <th>genre</th>\n",
              "      <th>year</th>\n",
              "      <th>key</th>\n",
              "      <th>popularity</th>\n",
              "      <th>explicit</th>\n",
              "      <th>explicitNum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Eminem</td>\n",
              "      <td>'Till I Collapse</td>\n",
              "      <td>pop</td>\n",
              "      <td>2013.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>84.0</td>\n",
              "      <td>False</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>NaN</td>\n",
              "      <td>All of Me</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Another Love</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Bored</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Circles</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Daddy Issues</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Do I Wanna Know?</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Locked out of Heaven</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Lost in the Fire (feat. The Weeknd)</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>NaN</td>\n",
              "      <td>No Lie</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Perfect</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Shape of You</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Someone You Loved</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Sweater Weather</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>NaN</td>\n",
              "      <td>The Hills</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>NaN</td>\n",
              "      <td>The Nights</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>NaN</td>\n",
              "      <td>The Real Slim Shady</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Wait a Minute!</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>NaN</td>\n",
              "      <td>Without Me</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>NaN</td>\n",
              "      <td>lovely (with Khalid)</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5bcfb619-1987-4e47-b065-57004c648b75')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5bcfb619-1987-4e47-b065-57004c648b75 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5bcfb619-1987-4e47-b065-57004c648b75');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Just checking for a trend between a specific key and if that makes it popular\n",
        "plt.scatter(song_df.key, song_df.popularity, marker='+', color = 'red')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "pucn7I36qEJw",
        "outputId": "ea6a22c5-6fd6-4ee1-e56d-56a9fe6c6f63"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f3d33249ff0>"
            ]
          },
          "metadata": {},
          "execution_count": 80
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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fBAREVFScfBBREREScXBBxERESUVBx9ERESUVBx8EBERUVJx8EFERERJxcEHERERJRUHH0RERJRUzbK8elPYBVerq6sDjoSIiIgay35vN2bhdHGDj6+++goAkJOTE3AkRERElKivvvoKmZmZR/wz4vZ2OXToEHbu3In27dsjLS3N17+7uroaOTk5KCsr474xTcDz6A+eR3/wPPqD59EfqXweI5EIvvrqK2RnZ6NFiyNXdYh78tGiRQuceOKJzfr/6NChQ8p9KJoDz6M/eB79wfPoD55Hf6Tqefx3TzwsFpwSERFRUnHwQUREREmVUoOP9PR0TJs2Denp6UGHohrPoz94Hv3B8+gPnkd/8Dw2jriCUyIiIgq3lHryQURERMHj4IOIiIiSioMPIiIiSioOPoiIiCipUmbw8cQTT6Bnz55o3bo1zjrrLBQWFgYdkjp5eXkYOnQo2rdvj65du2LMmDHYsmVL0GGp9qtf/QppaWmYOHFi0KGo89lnn+GHP/whOnfujDZt2uD000/He++9F3RYqhw8eBBTp05Fr1690KZNG5xyyin4n//5n0btzZHqVq5cicsvvxzZ2dlIS0vDokWLPP8+EongvvvuQ/fu3dGmTRuMGjUKH3/8cTDBCpQSg48XXngBkydPxrRp07B+/XoMGjQIo0ePRmVlZdChqVJQUIAJEyZgzZo1WLZsGQ4cOICLLroItbW1QYem0rp16zBnzhwMHDgw6FDU+fLLLzFy5Egce+yxWLJkCTZv3ozf/OY3OO6444IOTZWHHnoIs2fPxuOPP44PP/wQDz30EB5++GE89thjQYcmXm1tLQYNGoQnnngi7r9/+OGHMWvWLDz11FNYu3YtMjIyMHr0aOzbty/JkQoVSQHDhg2LTJgwof6fDx48GMnOzo7k5eUFGJV+lZWVEQCRgoKCoENR56uvvor06dMnsmzZssh5550XufPOO4MOSZWf//znkXPOOSfoMNS79NJLIzfeeKOn76qrroqMGzcuoIh0AhBZuHBh/T8fOnQo0q1bt8iMGTPq+/bs2RNJT0+PPP/88wFEKE/on3zs378fRUVFGDVqVH1fixYtMGrUKKxevTrAyPSrqqoCAHTq1CngSPSZMGECLr30Us/nkhrv1VdfxZAhQ/D9738fXbt2xeDBg/H0008HHZY6I0aMwPLly7F161YAwMaNG7Fq1SpccsklAUem27Zt21BeXu65vjMzM3HWWWfxe+dr4jaW89vnn3+OgwcPIisry9OflZWFjz76KKCo9Dt06BAmTpyIkSNHYsCAAUGHo0p+fj7Wr1+PdevWBR2KWqWlpZg9ezYmT56M//qv/8K6detwxx13oFWrVhg/fnzQ4alxzz33oLq6Gn379kXLli1x8OBBTJ8+HePGjQs6NNXKy8sBIO73jv13qS70gw9qHhMmTEBxcTFWrVoVdCiqlJWV4c4778SyZcvQunXroMNR69ChQxgyZAgefPBBAMDgwYNRXFyMp556ioOPBLz44ot47rnnsGDBAvTv3x/vv/8+Jk6ciOzsbJ5HalahT7scf/zxaNmyJSoqKjz9FRUV6NatW0BR6Xb77bfj9ddfx4oVK3DiiScGHY4qRUVFqKysxDe+8Q0cc8wxOOaYY1BQUIBZs2bhmGOOwcGDB4MOUYXu3bujX79+nr7TTjsNn3zySUAR6XT33XfjnnvuwbXXXovTTz8dP/rRjzBp0iTk5eUFHZpq9ruF3zuHF/rBR6tWrXDmmWdi+fLl9X2HDh3C8uXLMXz48AAj0ycSieD222/HwoUL8fbbb6NXr15Bh6TOhRdeiL/97W94//3363+GDBmCcePG4f3330fLli2DDlGFkSNHNpjmvXXrVpx00kkBRaTT3r170aKF92ugZcuWOHToUEARhUOvXr3QrVs3z/dOdXU11q5dy++dr6VE2mXy5MkYP348hgwZgmHDhmHmzJmora3FDTfcEHRoqkyYMAELFizA4sWL0b59+/rcZWZmJtq0aRNwdDq0b9++QY1MRkYGOnfuzNqZBEyaNAkjRozAgw8+iKuvvhqFhYWYO3cu5s6dG3Roqlx++eWYPn06evTogf79+2PDhg145JFHcOONNwYdmng1NTUoKSmp/+dt27bh/fffR6dOndCjRw9MnDgRDzzwAPr06YNevXph6tSpyM7OxpgxY4ILWpKgp9sky2OPPRbp0aNHpFWrVpFhw4ZF1qxZE3RI6gCI+zNv3rygQ1ONU22PzmuvvRYZMGBAJD09PdK3b9/I3Llzgw5Jnerq6sidd94Z6dGjR6R169aRk08+OfKLX/wiUldXF3Ro4q1YsSLu/XD8+PGRSMRMt506dWokKysrkp6eHrnwwgsjW7ZsCTZoQdIiES5lR0RERMkT+poPIiIikoWDDyIiIkoqDj6IiIgoqTj4ICIioqTi4IOIiIiSioMPIiIiSioOPoiIiCipOPggIiKipOLgg4iIiJKKgw8iIiJKKg4+iIiIKKk4+CAiIqKk+v+02EJC5002TAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Same thing was just trying to see if there is a trend between a song being popular based on the year\n",
        "plt.scatter(song_df.year, song_df.popularity, marker='+', color = 'blue')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "v6TaNbTLqwAh",
        "outputId": "35f84a93-0e5e-4d82-a763-749bdb5698e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f3d336c24a0>"
            ]
          },
          "metadata": {},
          "execution_count": 81
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#setting x and y lables\n",
        "# x are independent variables\n",
        "x = song_df[['key','year']]\n",
        "# y is dependent variable\n",
        "y = song_df['popularity']\n",
        "print(y)"
      ],
      "metadata": {
        "id": "NcXxPhO7v3ra",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7f5b23e6-1ff0-408e-b8ff-733417531a5e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0       77\n",
            "1       79\n",
            "2       66\n",
            "3       78\n",
            "4       65\n",
            "        ..\n",
            "1995    79\n",
            "1996    78\n",
            "1997    69\n",
            "1998    75\n",
            "1999    85\n",
            "Name: popularity, Length: 2000, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "song_df['popularity'].mode()"
      ],
      "metadata": {
        "id": "2mV7b1kOISzc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5f72a634-1e22-41e7-f2c6-35feab2378fb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    0\n",
              "Name: popularity, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 83
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "song_df.loc[song_df['popularity'] > 50, 'popularity'] = 1\n",
        "song_df.loc[song_df['popularity'] < 50, 'popularity'] = 0"
      ],
      "metadata": {
        "id": "De_lTK_mj7N8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#song_df.loc[song_df['popularity'] > 80, 'popularity'] = 1"
      ],
      "metadata": {
        "id": "EiEDHvA6q7Ik"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "song_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "id": "81OaVHhdtAvT",
        "outputId": "b3924f81-a9af-4d05-8a67-6e331d01962e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           artist                    song  duration_ms  explicit  year  \\\n",
              "0  Britney Spears  Oops!...I Did It Again       211160     False  2000   \n",
              "1       blink-182    All The Small Things       167066     False  1999   \n",
              "2      Faith Hill                 Breathe       250546     False  1999   \n",
              "3        Bon Jovi            It's My Life       224493     False  2000   \n",
              "4          *NSYNC             Bye Bye Bye       200560     False  2000   \n",
              "\n",
              "   popularity  danceability  energy  key  loudness  mode  speechiness  \\\n",
              "0           0         0.751   0.834    1    -5.444     0       0.0437   \n",
              "1           0         0.434   0.897    0    -4.918     1       0.0488   \n",
              "2           0         0.529   0.496    7    -9.007     1       0.0290   \n",
              "3           0         0.551   0.913    0    -4.063     0       0.0466   \n",
              "4           0         0.614   0.928    8    -4.806     0       0.0516   \n",
              "\n",
              "   acousticness  instrumentalness  liveness  valence    tempo         genre  \n",
              "0        0.3000          0.000018    0.3550    0.894   95.053           pop  \n",
              "1        0.0103          0.000000    0.6120    0.684  148.726     rock, pop  \n",
              "2        0.1730          0.000000    0.2510    0.278  136.859  pop, country  \n",
              "3        0.0263          0.000013    0.3470    0.544  119.992   rock, metal  \n",
              "4        0.0408          0.001040    0.0845    0.879  172.656           pop  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ae01b7d1-93e7-4c34-b42b-620b657ff8d9\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>artist</th>\n",
              "      <th>song</th>\n",
              "      <th>duration_ms</th>\n",
              "      <th>explicit</th>\n",
              "      <th>year</th>\n",
              "      <th>popularity</th>\n",
              "      <th>danceability</th>\n",
              "      <th>energy</th>\n",
              "      <th>key</th>\n",
              "      <th>loudness</th>\n",
              "      <th>mode</th>\n",
              "      <th>speechiness</th>\n",
              "      <th>acousticness</th>\n",
              "      <th>instrumentalness</th>\n",
              "      <th>liveness</th>\n",
              "      <th>valence</th>\n",
              "      <th>tempo</th>\n",
              "      <th>genre</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Britney Spears</td>\n",
              "      <td>Oops!...I Did It Again</td>\n",
              "      <td>211160</td>\n",
              "      <td>False</td>\n",
              "      <td>2000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.751</td>\n",
              "      <td>0.834</td>\n",
              "      <td>1</td>\n",
              "      <td>-5.444</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0437</td>\n",
              "      <td>0.3000</td>\n",
              "      <td>0.000018</td>\n",
              "      <td>0.3550</td>\n",
              "      <td>0.894</td>\n",
              "      <td>95.053</td>\n",
              "      <td>pop</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>blink-182</td>\n",
              "      <td>All The Small Things</td>\n",
              "      <td>167066</td>\n",
              "      <td>False</td>\n",
              "      <td>1999</td>\n",
              "      <td>0</td>\n",
              "      <td>0.434</td>\n",
              "      <td>0.897</td>\n",
              "      <td>0</td>\n",
              "      <td>-4.918</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0488</td>\n",
              "      <td>0.0103</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.6120</td>\n",
              "      <td>0.684</td>\n",
              "      <td>148.726</td>\n",
              "      <td>rock, pop</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Faith Hill</td>\n",
              "      <td>Breathe</td>\n",
              "      <td>250546</td>\n",
              "      <td>False</td>\n",
              "      <td>1999</td>\n",
              "      <td>0</td>\n",
              "      <td>0.529</td>\n",
              "      <td>0.496</td>\n",
              "      <td>7</td>\n",
              "      <td>-9.007</td>\n",
              "      <td>1</td>\n",
              "      <td>0.0290</td>\n",
              "      <td>0.1730</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.2510</td>\n",
              "      <td>0.278</td>\n",
              "      <td>136.859</td>\n",
              "      <td>pop, country</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Bon Jovi</td>\n",
              "      <td>It's My Life</td>\n",
              "      <td>224493</td>\n",
              "      <td>False</td>\n",
              "      <td>2000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.551</td>\n",
              "      <td>0.913</td>\n",
              "      <td>0</td>\n",
              "      <td>-4.063</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0466</td>\n",
              "      <td>0.0263</td>\n",
              "      <td>0.000013</td>\n",
              "      <td>0.3470</td>\n",
              "      <td>0.544</td>\n",
              "      <td>119.992</td>\n",
              "      <td>rock, metal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>*NSYNC</td>\n",
              "      <td>Bye Bye Bye</td>\n",
              "      <td>200560</td>\n",
              "      <td>False</td>\n",
              "      <td>2000</td>\n",
              "      <td>0</td>\n",
              "      <td>0.614</td>\n",
              "      <td>0.928</td>\n",
              "      <td>8</td>\n",
              "      <td>-4.806</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0516</td>\n",
              "      <td>0.0408</td>\n",
              "      <td>0.001040</td>\n",
              "      <td>0.0845</td>\n",
              "      <td>0.879</td>\n",
              "      <td>172.656</td>\n",
              "      <td>pop</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae01b7d1-93e7-4c34-b42b-620b657ff8d9')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ae01b7d1-93e7-4c34-b42b-620b657ff8d9 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ae01b7d1-93e7-4c34-b42b-620b657ff8d9');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 119
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Splitting the data to train and test data\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.4, random_state = 15)\n"
      ],
      "metadata": {
        "id": "kSDJO2Jqt0LJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.head()"
      ],
      "metadata": {
        "id": "WIHD4-abviBA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "outputId": "a366ff19-8c3e-4a53-94c3-19c4063d77eb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      key  year\n",
              "1471    9  2014\n",
              "434     6  2004\n",
              "1447    7  2014\n",
              "479     2  2004\n",
              "590     7  2004"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-13810e92-7e3b-4c6a-9228-04be19a059ef\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>key</th>\n",
              "      <th>year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1471</th>\n",
              "      <td>9</td>\n",
              "      <td>2014</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>434</th>\n",
              "      <td>6</td>\n",
              "      <td>2004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1447</th>\n",
              "      <td>7</td>\n",
              "      <td>2014</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>479</th>\n",
              "      <td>2</td>\n",
              "      <td>2004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>590</th>\n",
              "      <td>7</td>\n",
              "      <td>2004</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-13810e92-7e3b-4c6a-9228-04be19a059ef')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-13810e92-7e3b-4c6a-9228-04be19a059ef button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-13810e92-7e3b-4c6a-9228-04be19a059ef');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Preprocessing the data using standard scalar\n",
        "scalar = StandardScaler().fit(x_train)\n",
        "print(scalar)"
      ],
      "metadata": {
        "id": "-eOXmUJJuoeN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a65657c2-c1a6-4e7d-f09b-763844043f6c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "StandardScaler()\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Transforming values of x_train\n",
        "x_train_scaled = scalar.transform(x_train)\n",
        "x_train_scaled"
      ],
      "metadata": {
        "id": "nYz9eCTzydGq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bc599f9d-f5cf-485f-fe8e-27f1b895d47a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1.00845868,  0.77913519],\n",
              "       [ 0.17712109, -0.91986941],\n",
              "       [ 0.45423362,  0.77913519],\n",
              "       ...,\n",
              "       [-0.37710397,  1.45873704],\n",
              "       [ 1.56268374,  1.28883658],\n",
              "       [ 1.56268374,  0.77913519]])"
            ]
          },
          "metadata": {},
          "execution_count": 91
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Transforming values of x_test with the same scalar\n",
        "x_test_scaled = scalar.transform(x_test)"
      ],
      "metadata": {
        "id": "cYgxa4v9xwqI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "Uz8JD_R04N5L",
        "outputId": "e8714978-30bd-4f38-c7e1-7281faa0c976"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      key  year\n",
              "1471    9  2014\n",
              "434     6  2004\n",
              "1447    7  2014\n",
              "479     2  2004\n",
              "590     7  2004"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-220dc920-fb7e-4e3a-8bde-10a5df53288d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>key</th>\n",
              "      <th>year</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1471</th>\n",
              "      <td>9</td>\n",
              "      <td>2014</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>434</th>\n",
              "      <td>6</td>\n",
              "      <td>2004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1447</th>\n",
              "      <td>7</td>\n",
              "      <td>2014</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>479</th>\n",
              "      <td>2</td>\n",
              "      <td>2004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>590</th>\n",
              "      <td>7</td>\n",
              "      <td>2004</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-220dc920-fb7e-4e3a-8bde-10a5df53288d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-220dc920-fb7e-4e3a-8bde-10a5df53288d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-220dc920-fb7e-4e3a-8bde-10a5df53288d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 93
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "scalar_test = StandardScaler().fit(x_train)"
      ],
      "metadata": {
        "id": "hqJKcWkW35ry"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Transforming values of x_test\n",
        "x_test_scaled = scalar_test.transform(x_test)"
      ],
      "metadata": {
        "id": "NN-DKqux4Sg_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(scalar_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ONEncUef4saR",
        "outputId": "9500cb30-6b67-4138-c8cc-8e83c66b91bd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "StandardScaler()\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Use scikit-learn Logistic Regression for training and testing your model.\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "logistic_model = LogisticRegression()\n",
        "logistic_model.fit(x_train_scaled,y_train)\n"
      ],
      "metadata": {
        "id": "NFVoKUAfnbBb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "outputId": "357f5a2a-ed11-4c5b-816d-a1099c6eaeee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#testing the model\n",
        "prediction_train = logistic_model.predict(x_train_scaled)\n",
        "prediction_train"
      ],
      "metadata": {
        "id": "HgGLY53AuEZJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b18e9695-2456-4034-bc03-ffac213446af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 1, 57,  1, ...,  0,  1,  1])"
            ]
          },
          "metadata": {},
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#verfying accuracy. Changed test data to 80% which made our accuracy 75% accurate\n",
        "#at first when the test set was 70% our accuracy was 53%\n",
        "from sklearn import metrics\n",
        "print('Accuracy =', metrics.accuracy_score(y_test,prediction_test))"
      ],
      "metadata": {
        "id": "zy1BdVYJuTEd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a0f89ab8-c757-4c73-de90-4e87f4b0ce0a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy = 0.07375\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import classification_report\n",
        "\n",
        "# Generate predictions on the test set\n",
        "prediction_test = logistic_model.predict(scalar.transform(x_test))\n",
        "\n",
        "# Generate the classification report\n",
        "report = classification_report(y_test, prediction_test, zero_division=1)\n",
        "print(report)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ajkLz9tSqUoY",
        "outputId": "49c54622-7cb2-449f-fc1f-624147ce0e97"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.14      0.43      0.21        54\n",
            "           1       0.07      0.57      0.13        46\n",
            "           2       1.00      0.00      0.00         4\n",
            "           3       1.00      0.00      0.00         1\n",
            "           4       1.00      0.00      0.00         2\n",
            "           7       1.00      0.00      0.00         1\n",
            "          18       1.00      0.00      0.00         1\n",
            "          21       1.00      0.00      0.00         1\n",
            "          24       1.00      0.00      0.00         1\n",
            "          27       1.00      0.00      0.00         1\n",
            "          30       1.00      0.00      0.00         2\n",
            "          35       1.00      0.00      0.00         1\n",
            "          36       1.00      0.00      0.00         2\n",
            "          39       1.00      0.00      0.00         2\n",
            "          40       1.00      0.00      0.00         2\n",
            "          41       1.00      0.00      0.00         1\n",
            "          42       1.00      0.00      0.00         3\n",
            "          43       1.00      0.00      0.00         3\n",
            "          45       1.00      0.00      0.00         7\n",
            "          46       1.00      0.00      0.00         5\n",
            "          47       1.00      0.00      0.00         3\n",
            "          48       1.00      0.00      0.00         7\n",
            "          49       1.00      0.00      0.00        10\n",
            "          50       1.00      0.00      0.00         5\n",
            "          51       1.00      0.00      0.00         7\n",
            "          52       1.00      0.00      0.00         8\n",
            "          53       1.00      0.00      0.00        10\n",
            "          54       1.00      0.00      0.00        12\n",
            "          55       0.00      0.00      0.00         8\n",
            "          56       0.00      0.00      0.00        18\n",
            "          57       0.00      0.00      0.00        23\n",
            "          58       0.05      0.05      0.05        19\n",
            "          59       0.03      0.06      0.04        17\n",
            "          60       1.00      0.00      0.00        16\n",
            "          61       0.07      0.16      0.09        25\n",
            "          62       0.00      0.00      0.00        17\n",
            "          63       1.00      0.00      0.00        32\n",
            "          64       0.02      0.05      0.03        22\n",
            "          65       0.10      0.17      0.13        23\n",
            "          66       1.00      0.00      0.00        26\n",
            "          67       1.00      0.00      0.00        30\n",
            "          68       1.00      0.00      0.00        34\n",
            "          69       0.00      0.00      0.00        30\n",
            "          70       1.00      0.00      0.00        27\n",
            "          71       1.00      0.00      0.00        25\n",
            "          72       1.00      0.00      0.00        30\n",
            "          73       1.00      0.00      0.00        25\n",
            "          74       1.00      0.00      0.00        21\n",
            "          75       1.00      0.00      0.00        24\n",
            "          76       1.00      0.00      0.00        27\n",
            "          77       1.00      0.00      0.00        23\n",
            "          78       1.00      0.00      0.00        20\n",
            "          79       1.00      0.00      0.00        21\n",
            "          80       1.00      0.00      0.00        15\n",
            "\n",
            "    accuracy                           0.07       800\n",
            "   macro avg       0.79      0.03      0.01       800\n",
            "weighted avg       0.64      0.07      0.03       800\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "y_pred = logistic_model.predict(x_test_scaled)\n",
        "\n",
        "# Compute confusion matrix\n",
        "cnf_matrix = confusion_matrix(y_test, prediction_test)\n",
        "\n",
        "# Plot confusion matrix as a heatmap\n",
        "sns.heatmap(cnf_matrix, annot=True, fmt='d', cmap='Blues')\n",
        "plt.xlabel('Predicted')\n",
        "plt.ylabel('Actual')\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "bzWBMQkKxAyd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "outputId": "d2e9407d-735d-45e8-fb18-a3ec9f0e3575"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
